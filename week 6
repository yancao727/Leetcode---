253. Meeting Rooms II (Medium)
Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],…] (si < ei), find the minimum number of conference rooms required.

Example 1:

Input: [[0, 30],[5, 10],[15, 20]]
Output: 2
Example 2:

Input: [[7,10],[2,4]]
Output: 1

#### 思路：
使用优先队列算法, 生成优先队列, 代表已开的房间, 先将时间段按照开始时间排序, 遍历时间段, 如果没有多余的房间, 则将这个会议的加到队列里, 如果有多余的房间且目前会议的起始之间在上个会议的终止时间之后, 更新队列.
Time: O(n)
Space: O(1)

class Solution(object):
    def minMeetingRooms(self, intervals):
        """
        :type intervals: List[Interval]
        :rtype: int
        """
        intervals.sort(key = lambda x: x.start) #按照开始时间排序
        heap = []
        for interval in intervals:
            if heap and interval.start >= heap[0]： #上一个会议结束之后可以开始下一个会议
                heapq.heaprepleace(heap, interval.end) #把结束时间更新
            else:
                heapq.heappush(heap, interval.end)
        return len(heap)
        
        
340. 至多包含 K 个不同字符的最长子串
给定一个字符串 s ，找出 至多 包含 k 个不同字符的最长子串 T。
示例 1:
输入: s = “eceba”, k = 2
输出: 3
解释: 则 T 为 “ece”，所以长度为 3。
示例 2:
输入: s = “aa”, k = 1
输出: 2
解释: 则 T 为 “aa”，所以长度为 2。

class Solution:
    def lengthOfLongestSubstringKDistinct(self, s:str, k:int):
        if not s or not k: return 0
        
        window = dict()
        l = -1
        max_len = 0
        
        for r, char in enumerate(s):
            window[char] = r
            if len(window) > k:
                l = min(window.values())
                window.pop(s[l])
            max_len = max(max_len, r-l)
        return max_len


759. Employee Free Time
#### 题意
输入给出数组“schedule”来表示每个员工的工作时间段，例如
schedule = [
[(1,2), (5,6)],
[(1,3)],
[(4,10)],
]
表示第一个员工1点到2点工作、5点到6点工作，第二个员工1点到3点工作，第三个员工4点到10点工作。请找出所有员工都休息的时间段。

#### 思路：
1. sort all intervals by start time
2. visual merging intervals

#### Time:  O(m * logn), m is the number of schedule, n is the number of employees, m >= n
#### Space: O(n)

import heapq

class Interval(object):
    def __init__(self, s=0, e=0):
        self.start = s
        self.end = e

class Solution(object):
    def employeeFreeTime(self, schedule):
        """
        :type schedule: List[List[Interval]]
        :rtype: List[Interval]
        """
        result = []
        min_heap = [(emp[0].start, eid, 0) for eid, emp in enumerate(schedule)]
        heapq.heapify(min_heap)
        last_end = -1
        while min_heap:
            t, eid, i = heapq.heappop(min_heap)
            if 0 <= last_end < t:
                result.append(Interval(last_end, t))
            last_end = max(last_end, schedule[eid][i].end)
            if i+1 < len(schedule[eid]):
                heapq.heappush(min_heap, (schedule[eid][i+1].start, eid, i+1))
        return result
