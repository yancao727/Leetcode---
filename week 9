### 270. Closest Binary Search Tree Value
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def closestValue(self, root, target):
        """
        :type root: TreeNode
        :type target: float
        :rtype: int
        """
        self._ans = root.val
        self._target = target
        
        def compare(node):
            if node is None:
                return
            if abs(node.val-self._target) < abs(self._ans-self._target):
                self._ans = node.val
            compare(node.left)
            compare(node.right)
        compare(root)
        return self._ans
        
  ### 1060. Missing Element in Sorted Array
# Given a sorted array A of unique numbers, find the K-th missing number starting from the leftmost number of the array.

class Solution(object):
    def missingElement(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
 
        for i in range(1, len(nums)):
            interval = nums[i] - nums[i - 1] - 1 #interval代表间隔的数字
            if interval >= k:                    #说明答案出现在nums[i-1] 到 nums[i]之间
                return nums[i - 1] + k
            k -= interval
 
        return nums[-1] + k                      #说明答案出现在nums[-1]的后面
