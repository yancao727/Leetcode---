772. Basic Calculator III (hard)
Implement a basic calculator to evaluate a simple expression string.

The expression string may contain open ( and closing parentheses ), the plus + or minus sign -, non-negative integers and empty spaces .

The expression string contains only non-negative integers, +, -, *, / operators , open ( and closing parentheses ) and empty spaces . The integer division should truncate toward zero.

分情况来处理遍历，我们需要几个变量，num 表示当前的数字，curRes 表示当前的结果，res 为最终的结果，op 为操作符号，初始化为 '+'。当遇到数字的时候，我们将 num 自乘以 10 并加上这个数字，这是由于可能遇到多位数，所以每次要乘以 10。当遇到括号的时候，这里就有一个小 trick，由于表示可能会有括号嵌套括号，所以我们如果搜索右括号的话，就有可能使得括号没有正确的匹配上，所以我们用一个变量 cnt，遇到左括号自增1，遇到右括号自减1，当 cnt 为0的时候，说明括号正好完全匹配，这个 trick 在验证括号是否 valid 的时候经常使用到。然后我们就是根据左右括号的位置提取出中间的子字符串调用递归函数，返回值赋给 num。如果遇到符号，或者是最后一个位置的字符时，我们根据 op 的值对 num 进行分别的加减乘除的处理，结果保存到 stack 中。然后将num 重置为0。最后将当前字符s[ i ]赋值给 op（注意这里只有当时最后一个位置的字符时，才有可能不是运算符号，不过也不要紧了，因为遍历已经结束了）

class Solution(object):
    def calculate(self, s):
        """
        :type s: str
        :rtype: int
        """
        op = "+"
        n = len(s)
        res = 0
        num = 0
        stack = []
        i = 0
        while i < n:
            if s[i] >= "0" and s[i] <= "9":
                num = num*10 + int(s[i])
            elif s[i] == "(":
                j = i
                cnt = 0
                while i < n:
                    if s[i] == "(":
                        cnt+=1
                    if s[i] == ")":
                        cnt-=1
                    if cnt == 0:
                        break
                        # break后i+1不再计算
                    i+=1
                num = self.calculate(s[j+1:i])
                
            if s[i] == '+' or s[i] == '-' or s[i] == '*' or s[i] == '/' or i == n-1:
                # op是上一个遇到的操作符
                if op == '+':
                    stack.append(num)
                elif op == '-':
                    stack.append(-num)
                elif op == "*":
                    t = stack.pop(-1) * num
                    stack.append(t)
                else:
                    # 解决python的负数下取整
                    if stack[-1] > 0:
                        t = stack.pop(-1) // num
                    else:
                        t = -(-stack.pop(-1) // num)
                    stack.append(t)
                num = 0
                op = s[i]
            i+=1
        while stack:
            # stack.pop(-1) 也行
            res = res + stack.pop(0)
        return res

272. 最接近的二叉搜索树值 II
给定一个不为空的二叉搜索树和一个目标值 target，请在该二叉搜索树中找到最接近目标值 target 的 k 个值。

注意： 给定的目标值 target 是一个浮点数 你可以默认 k 值永远是有效的，即 k ≤ 总结点数 题目保证该二叉搜索树中只会存在一种 k 个值集合最接近目标值

输入: root = [4,2,5,1,3]，目标值 = 3.714286，且 k = 2

4
/
2 5 /
1 3

输出: [4,3]

思路：
先中序遍历得到升序数组，然后问题变成在 一个升序数组里找最接近target的k个值，

问最接近/最大/最小的k个值的问题就上堆，

这里问最接近target，就是问差值的绝对值最小，所以开一个size为k的最大堆。

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
from heapq import *
class Solution(object):
    def closestKValues(self, root, target, k):
        """
        :type root: TreeNode
        :type target: float
        :type k: int
        :rtype: List[int]
        """
        def inOrder(node):
            if not node:
                return []
            return inOrder(node.left) + [node.val] + inOrder(node.right)
        
        l = inOrder(root)
        subs = []
        heapify(subs)
        for num in l:
            sub = abs(target - num)
            heappush(subs, (-sub, num))
            if len(subs) > k:
                heappop(subs)
                
        res = []
        for sub, num in subs:
            res.append(num)
        return res
