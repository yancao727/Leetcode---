

在迷宫中有一个球，里面有空的空间和墙壁。球可以通过滚上，下，左或右移动，
但它不会停止滚动直到撞到墙上。当球停止时，它可以选择下一个方向。

给定球的起始位置，目的地和迷宫，确定球是否可以停在终点。

迷宫由二维数组表示。1表示墙和0表示空的空间。你可以假设迷宫的边界都是墙。开始和目标坐标用行和列索引表示。

思路：dfs

Time: O(mn)
Space: O(mn)

class Solution(object):
    def hasPath(self, maze, start, destination):
        """
        :type maze: List[List[int]]
        :type start: List[int]
        :type destination: List[int]
        :rtype: bool
        """
        def dfs(x,y):
            if [x,y] == destination:
                return True
            if [x,y] in visited:
                return False
            visited.add((x,y))
            
            for dx,dy in [(-1,0),(1,0),(0,-1),(0,1)]:
                new_x, new_y = x + dx, y + dy
                while 0 <= new_x < row and 0 <= new_y < col and maze[new_x][new_y] == 0:
                    dfs(new_x, new_y)
            return False 
        
        row, col = len(maze), len(maze[0])
        visited = set()
        return dfs(start[0],start[1])
				
323. 无向图中连通分量的数目（Medium）
题目描述:
给定编号从 0 到 n-1 的 n 个节点和一个无向边列表（每条边都是一对节点），请编写一个函数来计算无向图中连通分量的数目。

#dfs
class Solution:
    def countComponents(self, n: int, edges: List[List[int]]) -> int:
        from collections import defaultdict
        graph = defaultdict(list)

        for x, y in edges:
            graph[x].append(y)
            graph[y].append(x)

        visited = set()

        def dfs(i):
            visited.add(i)
            for j in graph[i]:
                if j not in visited:
                    dfs(j)

        res = 0
        for i in range(n):
            if i not in visited:
                res += 1
                dfs(i)
        return res

#bfs
class Solution:
    def countComponents(self, n: int, edges: List[List[int]]) -> int:
        from collections import defaultdict, deque
        graph = defaultdict(list)

        for x, y in edges:
            graph[x].append(y)
            graph[y].append(x)

        visited = set()

        def bfs(i):
            queue = deque([i])
            while queue:
                i = queue.pop()
                for j in graph[i]:
                    if j not in visited:
                        visited.add(j)
                        queue.appendleft(j)

        res = 0
        for i in range(n):
            if i not in visited:
                res += 1
                visited.add(i)
                bfs(i)
        return res
